<div class="dot-container" id="dotContainer">
</div>

<script>
  const container = document.getElementById('dotContainer');
  let dots = [];
  const dotSize = 8;
  const dotSpacing = 40;
  let mouseX = -1000;
  let mouseY = -1000;
  let time = 0;

  function setupGrid() {
    container.innerHTML = '';
    dots = [];
    
    const numRows = Math.ceil(window.innerHeight / dotSpacing);
    const numCols = Math.ceil(window.innerWidth / dotSpacing);
    
    for (let row = 0; row < numRows; row++) {
      for (let col = 0; col < numCols; col++) {
        const dot = document.createElement('div');
        dot.className = 'dot';
        
        Object.assign(dot.style, {
          position: 'absolute',
          width: `${dotSize}px`,
          height: `${dotSize}px`,
          left: `${col * dotSpacing}px`,
          top: `${row * dotSpacing}px`,
          transform: 'scale(0.2)',
          backgroundColor: document.documentElement.classList.contains('dark') 
            ? 'rgba(255, 255, 255, 0.5)' 
            : 'rgba(0, 0, 0, 0.5)',
          borderRadius: '50%'
        });
        
        const dotObj = {
          element: dot,
          x: col * dotSpacing,
          y: row * dotSpacing,
          phase: Math.random() * Math.PI * 2,
          scale: 0.2
        };
        
        dots.push(dotObj);
        container.appendChild(dot);
      }
    }
  }

  document.addEventListener('mousemove', (e) => {
    mouseX = e.clientX;
    mouseY = e.clientY;
  });

  document.addEventListener('mouseleave', () => {
    mouseX = -1000;
    mouseY = -1000;
  });

  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(setupGrid, 200);
  });

  function animate() {
    time += 0.03;
    
    dots.forEach(dot => {
      const dx = mouseX - dot.x;
      const dy = mouseY - dot.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      const maxDistance = 180;
      
      const waveInfluence = Math.sin(time + dot.phase + dot.x / 100 + dot.y / 100) * 0.5 + 0.5;
      let targetScale = 0.2 + waveInfluence * 0.6;
      
      if (distance < maxDistance) {
        const hoverScale = 1 - (distance / maxDistance);
        targetScale = 0.2 + hoverScale * 2.0;
      }
      
      dot.scale += (targetScale - dot.scale) * 0.15;
      dot.element.style.transform = `scale(${dot.scale})`;
    });
    
    requestAnimationFrame(animate);
  }

  // Watch for theme changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === 'class') {
        const isDark = document.documentElement.classList.contains('dark');
        dots.forEach(dot => {
          dot.element.style.backgroundColor = isDark 
            ? 'rgba(200, 200, 200, 0.2)' 
            : 'rgba(80, 80, 80, 0.2)';
        });
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['class']
  });

  setupGrid();
  animate();
</script>

<style>
  .dot-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    z-index: 0;
    pointer-events: none;
    overflow: hidden;
  }

  .dot {
    position: absolute;
    border-radius: 50%;
    transform: scale(0.2);
    transition: transform 0.3s ease-out;
    width: 8px !important;
    height: 8px !important;
  }

  :global(.dark) .dot {
    background-color: rgba(200, 200, 200, 0.2) !important;
  }

  :global(.light) .dot {
    background-color: rgba(80, 80, 80, 0.2) !important;
  }
</style> 